openapi: 3.0.1
info:
  title: Sample API
  description: API description in Markdown.
  version: 1.0.0
servers:
  - url: 'https://api.example.com'
paths:
  /categories:
    get:
      summary: Returns a JSON dictionary of categories.
      description: Fetches the current list of categories as a JSON dictionary.
      responses:
        '200':
          description: A JSON dictionary of categories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categories'
    put:
      summary: Overrides the existing saved categories.
      description: Updates the categories by overriding the existing categories dictionary.
      requestBody:
        description: JSON dictionary to override existing categories.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Categories'
      responses:
        '200':
          description: Successfully updated categories.

  /users:
    get:
      summary: Returns a JSON list of users.
      description: Fetches the current list of users.
      responses:
        '200':
          description: A JSON list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Adds a new user.
      description: Adds a new user to the list of users.
      requestBody:
        description: User object to add.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully added user.

  /users/bulk:
    post:
      summary: Adds multiple users.
      description: Adds multiple users to the list of users.
      requestBody:
        description: List of user objects to add.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully added users.

  /users/{email}:
    get:
      summary: Returns a user by email.
      description: Fetches a user by their email address.
      responses:
        '200':
          description: A user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      parameters:
        - name: email
          in: path
          description: The email address of the user to fetch.
          required: true
          schema:
            type: string
    delete:
      summary: Deletes a user by email.
      description: Deletes a user by their email address.
      responses:
        '200':
          description: Successfully deleted user.
      parameters:
        - name: email
          in: path
          description: The email address of the user to delete.
          required: true
          schema:
            type: string
    put:
      summary: Updates a user by email.
      description: Updates a user by their email address.
      requestBody:
        description: User object to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully updated user.
      parameters:
        - name: email
          in: path
          description: The email address of the user to update.
          required: true
          schema:
            type: string

  /images:
    get:
      summary: Returns a JSON list of images.
      description: Fetches the current list of images.
      responses:
        '200':
          description: A JSON list of images.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'

  /images/upload:
    post:
      summary: Loads bucket of images.
      description: Loads a bucket of images to the server.
      requestBody:
        description: The bucket of images to load.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImagesBucket'
      responses:
        '200':
          description: Successfully loaded images.
  /images/tag:
    put:
      summary: update image.
      description: update image.
      requestBody:
        description: Image object that needs to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        '200':
          description: Successfully tagged image.
  /images/validate:
    put:
      summary: update image.
      description: update image.
      requestBody:
        description: Image object that needs to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        '200':
          description: Successfully validated image.
  /next_task:
    get:
      summary: Retrieve the next image task
      operationId: getNextImageTask
      responses:
        '200':
          description: Successful response with the next image task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
  /image/{id}:
    get:
      summary: Retrieve an image by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the image to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved image
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        '404':
          description: Image not found
        '500':
          description: Internal server error

components:
  schemas:
    Categories:
      type: object
      properties:
        entries:
          type: object
          additionalProperties:
            type: string
            description: Hebrew string representing the category name

    Role:
      type: string
      enum:
        - ADMIN
        - USER

    User:
      type: object
      properties:
        id:
          type: string
          description: The user's ID
        name:
          type: string
          description: The user's name
        email:
          type: string
          description: The user's email address
        role:
          $ref: '#/components/schemas/Role'

    ImagesBucket:
      type: object
      properties:
        bucketName:
          type: string
          description: The name of the bucket containing the images

    ImageStatus:
      type: string
      enum: [ PENDING, TAGGED, VALIDATED ]

    Image:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the image.
        gcsFullPath:
          type: string
          description: The full path of the image in the Google Cloud Storage
        status:
          $ref: '#/components/schemas/ImageStatus'
        coordinates:
          type: 'array'
          items:
            $ref: '#/components/schemas/Coordinates'
        taggerUserId:
          type: string
          description: The ID of the user who tagged the image
        validatorUserId:
          type: string
          description: The ID of the user who validated the image
        gcsTaggedPath:
          type: string
          description: The full path of the tagged image in the Google Cloud Storage

    Coordinates:
      type: object
      properties:
        animalId:
          type: string
          description: The unique identifier of the animal.
        xCenter:
          type: number
          format: double
          description: the x axis value of the center of the animal.
        yCenter:
          type: number
          format: double
          description: the y axis value of the center of the animal.
        width:
          type: number
          format: double
          description: the width of the animal.
        height:
          type: number
          format: double
          description: the height of the animal.
